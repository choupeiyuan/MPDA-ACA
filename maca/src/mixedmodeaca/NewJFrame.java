/*
 * NewJFrame
 */

/*
 * NewJFrame.java
 *
 * Created on 2010年5月11日, 下午07:48:01
 */

package mixedmodeaca;

import java.awt.Color;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.HyperlinkEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.html.HTML;
import javax.swing.ImageIcon;


/**
 *
 * @author Administrator
 */
public class NewJFrame extends javax.swing.JFrame implements Runnable {

    private SListModel attListModel = new SListModel();
    private SListModel cAttListModel  = new SListModel();
    String[] colName = {"Discrete Attributes", "Discretized Files"};
    private DefaultTableModel dTableModel = new DefaultTableModel(colName, 0);
    private Map<String, Integer> attMap = new HashMap<String, Integer>();
     

    /** Creates new form NewJFrame */
    public NewJFrame() {
        initComponents();
        try {
                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
                BufferedImage bImage = ImageIO.read(classLoader.getResourceAsStream("mixedmodeaca/clustering.png"));
                ImageIcon appIcon = new ImageIcon(bImage);
                this.setIconImage(appIcon.getImage());
        } catch (Exception e) {
                System.out.println("Icon Err: " + e);
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        confTab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        goButton = new javax.swing.JButton();
        inputFileLabel = new javax.swing.JLabel();
        inputFileButton = new javax.swing.JButton();
        outputDirButton = new javax.swing.JButton();
        outputDirLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        attList = new javax.swing.JList();
        dButton = new javax.swing.JButton();
        cButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        cAttList = new javax.swing.JList();
        rmDButton = new javax.swing.JButton();
        rmCButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dAttTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        alphaComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        kComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        nComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        iterationComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        exeTextPane = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mixed-Mode Attribute Clustering Algorithm (MACA)");
        setMinimumSize(new java.awt.Dimension(595, 620));

        goButton.setFont(new java.awt.Font("Tahoma", 0, 18));
        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        inputFileLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        inputFileLabel.setLabelFor(inputFileButton);

        inputFileButton.setText("Data File");
        inputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileButtonActionPerformed(evt);
            }
        });
        inputFileButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputFileButtonKeyPressed(evt);
            }
        });

        outputDirButton.setText("Output Directory");
        outputDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputDirButtonActionPerformed(evt);
            }
        });

        outputDirLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        outputDirLabel.setLabelFor(outputDirButton);

        attList.setBorder(javax.swing.BorderFactory.createTitledBorder("Attributes"));
        attList.setModel(attListModel);
        attList.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                attListMouseDragged(evt);
            }
        });
        jScrollPane3.setViewportView(attList);

        dButton.setText("Discrete >>");
        dButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dButtonActionPerformed(evt);
            }
        });

        cButton.setText("Continuous >>");
        cButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cButtonActionPerformed(evt);
            }
        });

        cAttList.setBorder(javax.swing.BorderFactory.createTitledBorder("Continuous Attributes"));
        cAttList.setModel(cAttListModel);
        jScrollPane4.setViewportView(cAttList);

        rmDButton.setText("<< Remove");
        rmDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmDButtonActionPerformed(evt);
            }
        });

        rmCButton.setText("<< Remove");
        rmCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmCButtonActionPerformed(evt);
            }
        });

        dAttTable.setModel(dTableModel);
        dAttTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dAttTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dAttTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(dAttTable);

        jLabel1.setText("Alpha:");

        alphaComboBox.setEditable(true);
        alphaComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6" }));

        jLabel2.setText("No. of Attribute Clusters: From");

        kComboBox.setEditable(true);
        kComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        kComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("To");

        nComboBox.setEditable(true);
        nComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jLabel4.setText("No. of Iterations:");

        iterationComboBox.setEditable(true);
        iterationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "100", "500", "1000", "1500", "2000", "5000", "10000" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(goButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 558, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(rmDButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(dButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(cButton, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                                    .addComponent(rmCButton, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(inputFileButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(outputDirButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                                    .addComponent(outputDirLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE))))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alphaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iterationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputFileButton)
                    .addComponent(inputFileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputDirButton)
                    .addComponent(outputDirLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(kComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alphaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(nComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(iterationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(dButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(rmDButton, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addGap(122, 122, 122)
                        .addComponent(cButton, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(rmCButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addGap(88, 88, 88)))
                .addComponent(goButton)
                .addContainerGap())
        );

        confTab.addTab("Configuration", jPanel1);

        jScrollPane2.setAutoscrolls(true);

        exeTextPane.setContentType("text/html");
        exeTextPane.setEditable(false);
        exeTextPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                exeTextPaneHyperlinkUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(exeTextPane);

        confTab.addTab("Execution", jScrollPane2);

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem2.setText("About");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(confTab, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(confTab, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void appendText(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                Document doc = exeTextPane.getDocument();
                exeTextPane.setCaretPosition(doc.getLength());
                //exeTextPane.replaceSelection("HIHI \n");
                try {
                    doc.insertString(doc.getLength(), text, null);
                } catch (BadLocationException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    Rectangle r = exeTextPane.modelToView(doc.getLength());
                    if ( r != null)
                        exeTextPane.scrollRectToVisible(r);
                } catch (BadLocationException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } );
  

    }
        public void appendHyperlink(final URL url, final String text) {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    Document doc = exeTextPane.getDocument();
                    exeTextPane.setCaretPosition(doc.getLength());
                    //exeTextPane.replaceSelection("HIHI \n");
                    try {
                         SimpleAttributeSet hrefAttr = new SimpleAttributeSet();
                        hrefAttr.addAttribute(HTML.Attribute.HREF, url.toString());

                        // Second, setup the <A> tag
                        SimpleAttributeSet attrs = new SimpleAttributeSet();
                        StyleConstants.setUnderline(attrs, true);
                        StyleConstants.setForeground(attrs, Color.blue);
                        attrs.addAttribute(HTML.Tag.A, hrefAttr);
                        doc.insertString(doc.getLength(), text, attrs);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        Rectangle r = exeTextPane.modelToView(doc.getLength());
                        if ( r != null)
                            exeTextPane.scrollRectToVisible(r);
                    } catch (BadLocationException ex) {
                        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } );
        

    }
    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // TODO add your handling code here:
        //System.out.println(confTab.getSelectedIndex());
        this.exeTextPane.setEditable(false);
        int k = Integer.parseInt( (String) this.kComboBox.getSelectedItem() );
        int n = Integer.parseInt((String) this.nComboBox.getSelectedItem() );

        if ( dTableModel.getRowCount() > 0 || cAttListModel.getSize() > 0
                && !this.inputFileLabel.getText().equals("")
                && !this.outputDirLabel.getText().equals("")
                && n >= k) {
            Thread worker = new Thread(this);
            worker.start();
        } else {
            if (this.inputFileLabel.getText().equals(""))
                JOptionPane.showMessageDialog(null, "Please Select Data File");
            else if (this.outputDirLabel.getText().equals(""))
                JOptionPane.showMessageDialog(null, "Please Select Output Directory");
            else if (k >= n)
                JOptionPane.showMessageDialog(null, "Please Check No. of Attribute Clusters Setting\n (e.g. From k To k+n) ");
            else
                JOptionPane.showMessageDialog(null, "Please Select Attributes");
        }
    }//GEN-LAST:event_goButtonActionPerformed

    public void run() {
        int k = Integer.parseInt( (String) this.kComboBox.getSelectedItem() );
        int n = Integer.parseInt((String) this.nComboBox.getSelectedItem() );
        String mode = "";
            if (dTableModel.getRowCount() > 0 && cAttListModel.getSize() > 0)
                mode = "Mixed";
            else if (dTableModel.getRowCount() > 0) mode = "Discrete";
            else if (cAttListModel.getSize() > 0) mode = "Continuous";
            confTab.setSelectedIndex(1);
            (new File(this.outputDirLabel.getText())).mkdir();
            //appendText("Testing" + "\n");
            final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";
            String timenow  = now(DATE_FORMAT_NOW);
            appendText("Date And Time: " + timenow+"\n\n");
            timenow = timenow.replace(":", "_");
            timenow = timenow.replace(" ", "_");
            String outputPath = this.outputDirLabel.getText()+timenow;

            appendText("1) Calculating Interdependence Redundancy Among Attributes ...... " );
            //Cal. R
            //Discrete Vs. Discrete
            int[] dColID = null;
            if (this.dTableModel.getRowCount() > 0) {
                dColID =new int[dTableModel.getRowCount()];
                System.out.println("Discrete Vs. Discrete: ");
                for (int i = 0; i<dTableModel.getRowCount();i++) {
                    System.out.print(dTableModel.getValueAt(i, 0) + "(" + attMap.get((String)dTableModel.getValueAt(i, 0))+ ")" + " ");
                    dColID[i] = attMap.get((String)dTableModel.getValueAt(i, 0));
                }
                System.out.println();
                AttributeClustering calDiscreteR = new AttributeClustering(this.inputFileLabel.getText(), dColID, outputPath, "Discrete_R.csv");
                calDiscreteR = null;
                
            }
            //Continuos Vs. Continuous
            int[] cColID = null;
            if (cAttListModel.getSize() > 0) {
                cColID = new int[cAttListModel.getSize()];
                System.out.println("Continuos Vs. Continuous: ");
                for (int i = 0; i<cAttListModel.getSize();i++) {
                    System.out.print(cAttListModel.getElementAt(i) + "(" + attMap.get((String)cAttListModel.getElementAt(i))+ ")" + " ");
                    cColID[i] = attMap.get((String)cAttListModel.getElementAt(i));
                }
                System.out.println();
                int alpha = Integer.parseInt((String)this.alphaComboBox.getModel().getSelectedItem());
                RCC rcc = new RCC(this.inputFileLabel.getText(), cColID, outputPath, alpha);
                rcc.calculate();
                rcc.writeResult("Continuous_R.csv");
                rcc = null;
            }
            //Discrete Vs. Continuous
            if ( dColID != null && cColID != null ) {
                //OCDD
                //Cal. R
                //Store "DiscreteContinuous_R.csv"
                //Hot Fix for Version without OCDD
                ArrayList<String> rList = new ArrayList<String>();
                for ( int i = 0; i < dColID.length ; i++) {
                    int[] tempColID = null;
                    tempColID =new int[cColID.length+1];
                    for ( int j = 1; j <= tempColID.length ; j++)
                        tempColID[j-1] = j;
                    //System.out.println("Line532: tempColID.length = " + tempColID.length);
                   // for (int z = 0; z < tempColID.length;z++)
                        //System.out.print(tempColID[z] + " , ");
                    //System.out.println();
                    AttributeClustering calTempR = new AttributeClustering(dTableModel.getValueAt(i, 1).toString(), tempColID, outputPath, "Temp_R.csv");
                    calTempR = null;
                    try {
                        //System.out.println("Line535: outputPath = " + outputPath);
                        FileInputStream fis = new FileInputStream(outputPath+File.separator+"Temp_R.csv");
                        BufferedReader dataFile = new BufferedReader(new InputStreamReader(fis));
                        String line = null;
                        if ( (line = dataFile.readLine()) != null)
                            rList.add(line.substring(line.indexOf(",")+1));
                        //System.out.println("Line540: line = " + line);
                        dataFile.close();
                    } catch (Exception e) {
                        System.out.println("Err on Temp_R.csv construction!");
                    }
                }
                try {
			FileWriter writer = new FileWriter(outputPath+File.separator+"DiscreteContinuous_R.csv");
			BufferedWriter out = new BufferedWriter(writer);
                        for ( int i = 0 ; i < rList.size() ; i++) {
                            out.write(rList.get(i));
                            out.newLine();
                        }
                        out.close();
                } catch (Exception e) {
                    System.out.println("Err on DiscreteContinuous_R.csv construction!");
                }
            }

            // Combine to create R for mixed-mode attributes
            if (mode.equals("Mixed")) {
                
                String DiscretePath  = outputPath + File.separator + "Discrete_R.csv";
                String DiscreteContinuousPath = outputPath + File.separator + "DiscreteContinuous_R.csv";
                String ContinuousPath = outputPath + File.separator + "Continuous_R.csv";
                String MixedPath = outputPath + File.separator + "Mixed_R.csv";
                /*combineR(DiscretePath, DiscreteContinuousPath, ContinuousPath, MixedPath);
                 Read Discrete_R.csv --> mixedR
                Read DiscreteContinuous_R.csv --> mixedR
                Read Continuous_R.csv --> mixedR
                Output --> Mixed_R.csv
                */
                try {
                    // Read DiscreteContinuous_R.csv into an array for faster transpose!
                    ArrayList<ArrayList<String>> dcList = new ArrayList<ArrayList<String>>();
                    FileInputStream fis = new FileInputStream(outputPath+File.separator+"DiscreteContinuous_R.csv");
                    BufferedReader dataFile = new BufferedReader(new InputStreamReader(fis));
                    String line = null;
                    while ( (line = dataFile.readLine()) != null) {
                        SimpleTokenizer st = new SimpleTokenizer(line,",");
                        ArrayList<String> rowToAdd = new ArrayList<String>();
                        while (st.hasMoreTokens())
                            rowToAdd.add(st.nextToken());
                        dcList.add(rowToAdd);
                    }
                    dataFile.close();
                    //System.out.println("Line590: size of dcList = " + dcList.size());
                    fis = new FileInputStream(outputPath+File.separator+"Discrete_R.csv");
                    dataFile = new BufferedReader(new InputStreamReader(fis));
                    FileWriter writer = new FileWriter(outputPath+File.separator+"Mixed_R.csv");
                    BufferedWriter out = new BufferedWriter(writer);
                    for (int i = 0 ; i < dColID.length && (line = dataFile.readLine()) != null; i++ )  { //write Discrete vs Discrete and Discrete vs Continuous
                        //System.out.println("Line596: line = " + line);
                        out.write(line);  //Discrete_R.csv 
                        for ( int j = 0; j < dcList.get(i).size() ; j++) {
                            out.write("," + dcList.get(i).get(j)); //+ DiscreteContinuous_R.csv
                        }
                        out.newLine();
                    }
                    dataFile.close();
                    fis = new FileInputStream(outputPath+File.separator+"Continuous_R.csv");
                    dataFile = new BufferedReader(new InputStreamReader(fis));
                    for (int i = 0 ; i < cColID.length && (line = dataFile.readLine()) != null; i++ )  { //write Discrete vs Continuous and Continuous vs Continuous
                        for (int j = 0 ; j < dcList.size() ; j++) {
                            out.write(dcList.get(j).get(i)+","); //DiscreteContinuous_R.csv
                        }
                        out.write(line); //+ Continuous_R.csv
                        out.newLine();
                    }
                    dataFile.close();
                    out.close();
                } catch (Exception e) {
                    System.out.println("Err on Mixed_R.csv construction! ");
                }
            }

            appendText("Done! \n\n");

            appendText("2) Performing Attribute Clustering Algorithm...... " );
            //Fit R into ACA
            String RPath = "";
            if (mode.equals("Discrete"))
                RPath = outputPath + File.separator + "Discrete_R.csv";
            else if (mode.equals("Continuous"))
                RPath = outputPath + File.separator + "Continuous_R.csv";
            else
                RPath = outputPath + File.separator + "Mixed_R.csv";
            String selectedAttributePath = outputPath + File.separator + "Selected_Attribute_Data.csv"; //need to combine a new data table to store all selected mixed mode attribute
            System.out.println("mode: " + mode );
            if (mode.equals("Continuous")) {
                MACA.makeAttTable(this.inputFileLabel.getText(), cColID,selectedAttributePath);
            } else if (mode.equals("Discrete")) {
                MACA.makeAttTable(this.inputFileLabel.getText(), dColID,selectedAttributePath);
            } else { //Mixed-Mode
                int[] mColID = null;
                mColID =new int[cColID.length+dColID.length];
                for (int i =0; i < dColID.length; i++)
                    mColID[i] = dColID[i];
                for (int i =0; i < cColID.length; i++)
                    mColID[dColID.length+i] = cColID[i];
                MACA.makeAttTable(this.inputFileLabel.getText(), mColID,selectedAttributePath);
            }
            int iteration = Integer.parseInt( (String) this.iterationComboBox.getSelectedItem());
            AttributeClustering aca = new AttributeClustering(selectedAttributePath, "", outputPath, k,iteration,RPath,0,0);
            int optK = aca.runACA(n, 1);
            appendText("Done! \n\n");
            appendText("The Results Are Stored In:\n\n");
            try {
                //appendText(outputPath+"\n\n");
                appendHyperlink(new File(outputPath).toURI().toURL(), outputPath);
            } catch (MalformedURLException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            appendText("\n\n");
            appendText("1) Interdependence Redundancy Matrix\n\n");
            if (mode.equals("Discrete") || mode.equals("Mixed")) {
                //appendText("- Discrete Vs. Discrete: " +  "Discrete_R.csv" + "\n\n");
                appendText("- Discrete Vs. Discrete: ");
                try {
                    //appendText(outputPath+"\n\n");
                    appendHyperlink(new File(outputPath + File.separator + "Discrete_R.csv").toURI().toURL(), "Discrete_R.csv" + "\n\n");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (mode.equals("Mixed")) {
                //appendText("- Discrete Vs. Continuous: "  + "DiscreteContinuous_R.csv" + "\n\n");
                appendText("- Discrete Vs. Continuous: " );
                try {
                    //appendText(outputPath+"\n\n");
                    appendHyperlink(new File(outputPath + File.separator + "DiscreteContinuous_R.csv").toURI().toURL(), "DiscreteContinuous_R.csv");
                    appendText("\n\n");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (mode.equals("Continuous") || mode.equals("Mixed")) {
                //appendText("- Continuous Vs. Continuous: "  + "Continuous_R.csv" + "\n\n");
                appendText("- Continuous Vs. Continuous: " );
                try {
                    //appendText(outputPath+"\n\n");
                    appendHyperlink(new File(outputPath + File.separator + "Continuous_R.csv").toURI().toURL(), "Continuous_R.csv");
                    appendText("\n\n");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (mode.equals("Mixed")) {
                //appendText("- Discrete Vs. Continuous: "  + "DiscreteContinuous_R.csv" + "\n\n");
                appendText("- Mixed: " );
                try {
                    //appendText(outputPath+"\n\n");
                    appendHyperlink(new File(outputPath + File.separator + "Mixed_R.csv").toURI().toURL(), "Mixed_R.csv");
                    appendText("\n\n");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            appendText("2) Attribute Clustering\n\n");
            appendText("- ACA Execution Report: ");
            try {
                    //appendText(outputPath+"\n\n");
                    appendHyperlink(new File(outputPath + File.separator + "ACA_ExecutionReport.csv").toURI().toURL(), "ACA_ExecutionReport.csv");
                    appendText("\n\n");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            appendText("- Attribute Groups: ");
            try {
                    //appendText(outputPath+"\n\n");
                    appendHyperlink(new File(outputPath + File.separator + "ACA_1" + File.separator + "AC_ItemsInClusters_k=" + optK + ".csv").toURI().toURL(), "AC_ItemsInClusters_k=" + optK + ".csv");
                    appendText("\n\n");
                } catch (MalformedURLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            appendText("--------------------------------------------------------------------------------------------------------------\n");
    }

    private void inputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileButtonActionPerformed
        // TODO add your handling code here:
        //inputFileLabel.setText("K:\\PQ713a\\Gene\\Project\\Prof.Wong\\Discretization\\IntrinsicClassDependenceDiscretization\\Dataset\\Continuous\\Iris");
        final JFileChooser fc = new JFileChooser(new File(inputFileLabel.getText()));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Comma Seperated Values (.csv)", "csv");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog (this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            inputFileLabel.setText(file.getPath());
            outputDirLabel.setText(file.getParent() + File.separator + "output" + File.separator);
            this.clearAttListModel();
            this.clearCAttListModel();
            //this.clearDAttListModel();
            this.clearDTableModel();
            readAtt(file);
	}

    }//GEN-LAST:event_inputFileButtonActionPerformed

    private void rmDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmDButtonActionPerformed
        // TODO add your handling code here:
        //dAttTable.getSelectedRowCount();
        if ( dAttTable.getSelectedRow() > -1) {
            int selected[] = dAttTable.getSelectedRows();
            addAttFromTable(selected);
            clearDAttSelected();
        }
    }//GEN-LAST:event_rmDButtonActionPerformed

    private void inputFileButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputFileButtonKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_inputFileButtonKeyPressed

    private void outputDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputDirButtonActionPerformed
        // TODO add your handling code here:
        final JFileChooser fc = new JFileChooser(new File(outputDirLabel.getText()));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog (this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            outputDirLabel.setText(file.getPath() + File.separator);
        }
    }//GEN-LAST:event_outputDirButtonActionPerformed

    private void rmCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmCButtonActionPerformed
        // TODO add your handling code here:
        if ( cAttList.getSelectedIndex() > -1) {
            Object selected[] = cAttList.getSelectedValues();
            addAtt(selected);
            clearCAttSelected();
        }
    }//GEN-LAST:event_rmCButtonActionPerformed

    private void cButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cButtonActionPerformed
        // TODO add your handling code here:
        if (attList.getSelectedIndex() > -1) {
            Object selected[] = attList.getSelectedValues();
            addCAtt(selected);
            clearAttSelected();
            //dAttTable.scrollRectToVisible(dAttTable.getCellRect(dTableModel.getRowCount()-1, 0, true));
            cAttList.scrollRectToVisible(cAttList.getBounds());
            cAttList.ensureIndexIsVisible(cAttListModel.getSize()-1);
        }
    }//GEN-LAST:event_cButtonActionPerformed

    private void attListMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attListMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_attListMouseDragged

    private void dAttTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dAttTableMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_dAttTableMousePressed

    private void dAttTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dAttTableMouseClicked
        // TODO add your handling code here:
         if ( SwingUtilities.isRightMouseButton(evt)) {
            openFc(evt);
            }
    }//GEN-LAST:event_dAttTableMouseClicked

    private void dButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dButtonActionPerformed
        // TODO add your handling code here:
        //Object[] newVal = {"test", ""};
        //dTableModel.addRow(newVal);
        if (attList.getSelectedIndex() > -1) {
            Object selected[] = attList.getSelectedValues();
            addDAtt(selected);
            clearAttSelected();
        }
        dAttTable.scrollRectToVisible(dAttTable.getCellRect(dTableModel.getRowCount()-1, 0, true));
    }//GEN-LAST:event_dButtonActionPerformed

    private void exeTextPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_exeTextPaneHyperlinkUpdate
        // TODO add your handling code here:
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
                {
                  try
                  {

                    String[] cmd = new String[4];

                    //This is a pure Windows solution (to be able to use it on Unix,.... see BrowserControl.java)
                    cmd[0] = "cmd.exe";
                    cmd[1] = "/C";
                    cmd[2] = "start";
                    cmd[3] = evt.getURL().toString();

                    Process process = Runtime.getRuntime().exec( cmd );//catch (IOException e){e.printStackTrace();}


                  }
                  catch (Exception e) {e.printStackTrace();}

                }
    }//GEN-LAST:event_exeTextPaneHyperlinkUpdate

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MousePressed
        // TODO add your handling code here:
         JOptionPane.showMessageDialog(null, "All Rights Reserved.");
    }//GEN-LAST:event_jMenuItem2MousePressed

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1MousePressed

    private void kComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kComboBoxActionPerformed

    public void openFc(final java.awt.event.MouseEvent evt) {
        /*
         * MouseClicked event includes this:
            if ( SwingUtilities.isRightMouseButton(evt)) {
            openFc(evt);
            }
        */
        SwingUtilities.invokeLater( new Runnable() {

            /*public void run() {
               JList list = (JList)evt.getSource();
                //list.setSelectedIndex(list.getSelectedIndex());
               list.setSelectedIndex(list.locationToIndex(evt.getPoint()));
                System.out.println(list.getSelectedIndex());
                final JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog (dAttTable); //jTable
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        System.out.println(file.getPath() );
                        
                }*/
            public void run() {
                Point p = evt.getPoint();
                int row = dAttTable.rowAtPoint(p);
                ListSelectionModel model = dAttTable.getSelectionModel();
                model.setSelectionInterval(row, row);
                final JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog (dAttTable);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        System.out.println(file.getPath() );
                        dAttTable.setValueAt(file.getPath(), row, 1);
                        
                }
            }
        });

    }
    public void clearAttListModel() {
        attListModel.clear();
    }
    public void clearCAttListModel() {
        cAttListModel.clear();
    }
    public void clearDTableModel() { //gene
        for ( int i = dTableModel.getRowCount(); i > 0 ; --i)
            dTableModel.removeRow(i-1);
    }
    public void addAtt(ListModel newVal) {
        fillListModel(attListModel, newVal);
    }
    public void addAtt(Object newVal[]) {
        fillListModel(attListModel, newVal);
    }
    public void setAtt(ListModel newVal) {
        clearAttListModel();
        addAtt(newVal);
    }
    public void setAtt(Object newVal[]) {
        clearAttListModel();
        addAtt(newVal);
    }
    public void addCAtt(ListModel newVal) {
        fillListModel(cAttListModel, newVal);
    }
    public void addCAtt(Object newVal[]) {
        fillListModel(cAttListModel, newVal);
    }
    public void addDAtt(Object newVal[]) {
        //Collection c  = Arrays.asList(newVal);
        for ( int i = 0; i < newVal.length ; i ++) {
           String[] val = {(String)newVal[i], ""};
           dTableModel.addRow(val);
           dTableModel.fireTableDataChanged();
           dTableModel.fireTableRowsUpdated(dTableModel.getRowCount(), dTableModel.getRowCount());
           //System.out.println("dTableModel.getRowCount()" + dTableModel.getRowCount());
        }
    }
    public void addAttFromTable(int[] row) {
        Object[] newVal = new Object[row.length];
        for (int i = 0; i < row.length ; i++) {
            newVal[i] = dTableModel.getValueAt(row[i], 0);
            //System.out.println(dTableModel.getValueAt(row[i], 0));
        }
        fillListModel(attListModel, newVal);
    }
    private void fillListModel(SListModel model, ListModel newVal) {
        int size = newVal.getSize();
        for ( int i = 0; i < size ; i ++) {
           model.add(newVal.getElementAt(i));
        }
    }
    private void fillListModel(SListModel model, Object newVal[]) {
        //System.out.println(newVal[0]);
        model.addAll(newVal);
    }
    private void clearAttSelected() {
        Object selected[] = attList.getSelectedValues();
        for (int i = selected.length-1 ; i >= 0 ; --i) {
            attListModel.removeElement(selected[i]);
        }
        attList.clearSelection();
    }
    private void clearCAttSelected() {
        Object selected[] = cAttList.getSelectedValues();
        for (int i = selected.length-1 ; i >= 0 ; --i) {
            cAttListModel.removeElement(selected[i]);
        }
        cAttList.clearSelection();
    }
    private void clearDAttSelected() {
        Object selected[] = cAttList.getSelectedValues();
        for (int i = selected.length-1 ; i >= 0 ; --i) {
            cAttListModel.removeElement(selected[i]);
        }
        int[] row = dAttTable.getSelectedRows();
        for ( int i = row.length-1; i >=0; --i)
            dTableModel.removeRow(row[i]);
        
        dAttTable.getSelectionModel().clearSelection();
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox alphaComboBox;
    private javax.swing.JList attList;
    private javax.swing.JList cAttList;
    private javax.swing.JButton cButton;
    private javax.swing.JTabbedPane confTab;
    private javax.swing.JTable dAttTable;
    private javax.swing.JButton dButton;
    private javax.swing.JTextPane exeTextPane;
    private javax.swing.JButton goButton;
    private javax.swing.JButton inputFileButton;
    private javax.swing.JLabel inputFileLabel;
    private javax.swing.JComboBox iterationComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox kComboBox;
    private javax.swing.JComboBox nComboBox;
    private javax.swing.JButton outputDirButton;
    private javax.swing.JLabel outputDirLabel;
    private javax.swing.JButton rmCButton;
    private javax.swing.JButton rmDButton;
    // End of variables declaration//GEN-END:variables

    private void readAtt(File file) {
        List<String> att = new ArrayList<String>();
        try {
            BufferedReader bufRdr = new BufferedReader(new FileReader(file));
            String line = null;
            int c = 0;
            if ( (line = bufRdr.readLine()) != null) {
                StringTokenizer st = new StringTokenizer(line, ",");
                while (st.hasMoreTokens()) {
                    String val = st.nextToken();
                    att.add(val);
                    attMap.put(val, c++);
                }
            }
            addAtt(att.toArray());
            bufRdr.close();
        } catch (Exception ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    public static String now(String format) {
	    Calendar cal = Calendar.getInstance();
	    SimpleDateFormat sdf = new SimpleDateFormat(format);
	    return sdf.format(cal.getTime());
	}

}
